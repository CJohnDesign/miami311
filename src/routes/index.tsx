import { useState, useMemo, useEffect, useRef } from "react";
import { App } from "../App";
import { useChat } from "../hooks/use-chat";
import { ChatMessage } from "../components/ChatMessage";
import { appConfig } from "../../config.browser";
import { Welcome } from "../components/Welcome";
import Header from "../components/Header";

export default function Index() {
  // The content of the box where the user is typing
  const [message, setMessage] = useState<string>("");

  // This hook is responsible for managing the chat and communicating with the
  // backend
  const { currentChat, chatHistory, sendMessage, cancel, state, clear } =
    useChat();

  // This is the message that is currently being generated by the AI
  const currentMessage = useMemo(() => {
    return { content: currentChat ?? "", role: "assistant" } as const;
  }, [currentChat]);

  // This is a ref to the bottom of the chat history. We use it to scroll
  // to the bottom when a new message is added.
  const bottomRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    scrollToBottom();
  }, [currentChat, chatHistory, state]);

  const scrollToBottom = () => {
    bottomRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  // This is a ref to the input box. We use it to focus the input box when the
  // user clicks on the "Send" button.
  const inputRef = useRef<HTMLInputElement>(null);
  const focusInput = () => {
    inputRef.current?.focus();
  };

  useEffect(() => {
    focusInput();
  }, [state]);

  return (
    <App title="Create your own AI chat bot">
      <Header />
      <main className="p-6 w-full h-full flex flex-col">
        <section className="overflow-y-auto flex-grow mb-4 pb-8">
          <div className="flex flex-col space-y-4">
            {chatHistory.length === 0 ? (
              <>
                <Welcome />
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                  {appConfig.samplePhrases.map((phrase) => (
                    <button
                      key={phrase}
                      onClick={() => sendMessage(phrase, chatHistory)}
                      className="text-white bg-slate-700 border-gray-600 border-2 rounded-lg p-4"
                    >
                      {phrase}
                    </button>
                  ))}
                </div>

              </>
            ) : (
              chatHistory.map((chat, i) => (
                <ChatMessage key={i} message={chat} />
              ))
            )}

            {currentChat ? <ChatMessage message={currentMessage} /> : null}
          </div>

          <div ref={bottomRef} />
        </section>
        <div className="flex items-center justify-center h-20">
          {state === "idle" ? null : (
            <button
              className="text-white bg-slate-700 border-gray-600 py-2 px-4 my-8"
              onClick={cancel}
            >
              Stop generating
            </button>
          )}
        </div>
        <section className="text-white bg-slate-700 rounded-lg p-2">
          <form
            className="flex"
            onSubmit={(e) => {
              e.preventDefault();
              sendMessage(message, chatHistory);
              setMessage("");
            }}
          >
            {chatHistory.length > 1 ? (
              <button
                className="text-white bg-slate-800 border-gray-600 py-2 px-4 rounded"
                type="button"
                onClick={(e) => {
                  e.preventDefault();
                  clear();
                  setMessage("");
                }}
              >
                Clear
              </button>
            ) : null}
            <input
              type="text"
              ref={inputRef}
              className="bg-slate-700	w-full rounded-l-lg p-2 outline-none"
              placeholder={state == "idle" ? "Type your message..." : "..."}
              value={message}
              onChange={(e) => setMessage(e.target.value)}
              disabled={state !== "idle"}
              style={{borderColor: '#72D0ED'}}
            />
            {state === "idle" ? (
              <button id='openDebug' type="submit" className="bg-pink-600" style={{ backgroundColor: 'transparent', border: 'none', padding: '12px' }}>
                <svg width="24" height="24" viewBox="0 0 673 673" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path className="bg-pink-600" fill="#DE5684" d="M663.653 9.276C655.268 0.89053 642.727 -1.72401 631.675 2.57293L19.408 241.506C9.03826 245.558 1.77733 255.042 0.58533 266.11C-0.623003 277.188 4.43946 288.001 13.7104 294.184L232.724 440.197L378.75 659.237C384.318 667.607 393.682 672.534 403.584 672.534C404.651 672.534 405.724 672.477 406.808 672.362C417.886 671.169 427.37 663.904 431.428 653.523L670.361 41.2566C674.663 30.1993 672.023 17.6526 663.653 9.26732L663.653 9.276ZM94.56 276.303L520.707 109.996L250.453 380.236L94.56 276.303ZM396.627 578.356L292.684 422.463L562.911 152.249L396.627 578.356Z" />
                </svg>

              </button>
            ) : null}
          </form>
        </section>
      </main>
    </App>
  );
}
